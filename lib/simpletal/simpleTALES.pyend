""" simpleTALES Implementation

		Copyright (c) 2005 Colin Stewart (http://www.owlfish.com/)
		All rights reserved.
		
		Redistribution and use in source and binary forms, with or without
		modification, are permitted provided that the following conditions
		are met:
		1. Redistributions of source code must retain the above copyright
		   notice, this list of conditions and the following disclaimer.
		2. Redistributions in binary form must reproduce the above copyright
		   notice, this list of conditions and the following disclaimer in the
		   documentation and/or other materials provided with the distribution.
		3. The name of the author may not be used to endorse or promote products
		   derived from this software without specific prior written permission.
		
		THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
		IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
		OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
		IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
		INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
		NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
		THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		
		If you make any bug fixes or feature enhancements please let me know!
		
		The classes in this module implement the TALES specification, used
		by the simpleTAL module.
		
		Module Dependencies: logging
"""

import types, sys

try:
        import logging
end
except:
        import DummyLogger as logging
end
import simpletal, simpleTAL

__version__ = simpletal.__version__

DEFAULTVALUE = "This represents a Default value."

class PathNotFoundException (Exception):
        pass
end
class ContextContentException (Exception):
        """ This is raised when invalid content has been placed into the Context object.
		For example using non-ascii characters instead of Unicode strings.
	"""
        pass
end
PATHNOTFOUNDEXCEPTION = PathNotFoundException()

class ContextVariable:
        def __init__ (self, value = None):
                self.ourValue = value
end
        def value (self, currentPath=None):
                if (callable (self.ourValue)):
                        return apply (self.ourValue, ())
end
                return self.ourValue
end
        def rawValue (self):
                return self.ourValue
end
        def __str__ (self):
                return repr (self.ourValue)
end
end
class RepeatVariable (ContextVariable):
        """ To be written"""
        def __init__ (self, sequence):
                ContextVariable.__init__ (self, 1)
                self.sequence = sequence	
                self.position = 0	
                self.map = None
end
        def value (self, currentPath=None):
                if (self.map is None):
                        self.createMap()
end
                return self.map
end
        def rawValue (self):
                return self.value()
end
        def getCurrentValue (self):
                return self.sequence [self.position]
end
        def increment (self):
                self.position += 1
                if (self.position == len (self.sequence)):
                        raise IndexError ("Repeat Finished")
end
end
        def createMap (self):
                self.map = {}
                self.map ['index'] = self.getIndex
                self.map ['number'] = self.getNumber
                self.map ['even'] = self.getEven
                self.map ['odd'] = self.getOdd
                self.map ['start'] = self.getStart
                self.map ['end'] = self.getEnd
                # TODO: first and last need to be implemented.
                self.map ['length'] = len (self.sequence)
end
                self.map ['letter'] = self.getLowerLetter
                self.map ['Letter'] = self.getUpperLetter
                self.map ['roman'] = self.getLowerRoman
                self.map ['Roman'] = self.getUpperRoman
        # Repeat implementation goes here
        def getIndex (self):
end
                return self.position
end
        def getNumber (self):
                return self.position + 1
end
        def getEven (self):
                if ((self.position % 2) != 0):
                        return 0
end
                return 1
end
        def getOdd (self):
                if ((self.position % 2) == 0):
                        return 0
end
                return 1
end
        def getStart (self):
                if (self.position == 0):
                        return 1
end
                return 0
end
        def getEnd (self):
                if (self.position == len (self.sequence) - 1):
                        return 1
end
                return 0
end
        def getLowerLetter (self):
                result = ""
                nextCol = self.position
                if (nextCol == 0):
                        return 'a'
end
                while (nextCol > 0):
                        nextCol, thisCol = divmod (nextCol, 26)
                        result = chr (ord ('a') + thisCol) + result
end
                return result
end
        def getUpperLetter (self):
                return self.getLowerLetter().upper()
end
        def getLowerRoman (self):
                romanNumeralList = (('m', 1000)						   ,('cm', 900)						   ,('d', 500)						   ,('cd', 400)						   ,('c', 100)						   ,('xc', 90)						   ,('l', 50)						   ,('xl', 40)						   ,('x', 10)						   ,('ix', 9)						   ,('v', 5)						   ,('iv', 4)						   ,('i', 1)						   )
                if (self.position > 3999):
                        # Roman numbers only supported up to 4000
                        return ' '
end
                num = self.position + 1
                result = ""
                for roman, integer in romanNumeralList:
                        while (num >= integer):
                                result += roman
                                num -= integer
end
end
                return result
end
        def getUpperRoman (self):
                return self.getLowerRoman().upper()
end
end
class IteratorRepeatVariable (RepeatVariable):
        def __init__ (self, sequence):
                RepeatVariable.__init__ (self, sequence)
                self.curValue = None
                self.iterStatus = 0
end
        def getCurrentValue (self):
                if (self.iterStatus == 0):
                        self.iterStatus = 1
                        try:
                                self.curValue = self.sequence.next()
end
                        except StopIteration, e:
                                self.iterStatus = 2
                                raise IndexError ("Repeat Finished")
end
end
                return self.curValue
end
        def increment (self):
                # Need this for the repeat variable functions.
                self.position += 1
end
end
end
                try:
end
end
end
                        self.curValue = self.sequence.next()
end
end
end
                except StopIteration, e:
end
end
end
                        self.iterStatus = 2
end
end
end
                        raise IndexError ("Repeat Finished")
end
        def createMap (self):
                self.map = {}
                self.map ['index'] = self.getIndex
                self.map ['number'] = self.getNumber
                self.map ['even'] = self.getEven
                self.map ['odd'] = self.getOdd
                self.map ['start'] = self.getStart
                self.map ['end'] = self.getEnd
                # TODO: first and last need to be implemented.
                self.map ['length'] = sys.maxint
end
                self.map ['letter'] = self.getLowerLetter
                self.map ['Letter'] = self.getUpperLetter
                self.map ['roman'] = self.getLowerRoman
                self.map ['Roman'] = self.getUpperRoman
end
        def getEnd (self):
                if (self.iterStatus == 2):
                        return 1
end
                return 0
end
end
class PathFunctionVariable (ContextVariable):
        def __init__ (self, func):
                ContextVariable.__init__ (self, value = func)
                self.func = func
end
        def value (self, currentPath=None):
                if (currentPath is not None):
                        index, paths = currentPath
                        result = ContextVariable (apply (self.func, ('/'.join (paths[index:]),)))
                        # Fast track the result
                        raise result
end
end
end
end
class CachedFuncResult (ContextVariable):
        def value (self, currentPath=None):
                try:
                        return self.cachedValue
end
                except:
                        self.cachedValue = ContextVariable.value (self)
end
                return self.cachedValue
end
        def clearCache (self):
                try:
                        del self.cachedValue
end
                except:
                        pass
end
end
end
class PythonPathFunctions:
        def __init__ (self, context):
                self.context = context
end
        def path (self, expr):
                return self.context.evaluatePath (expr)
end
        def string (self, expr):
                return self.context.evaluateString (expr)
end
        def exists (self, expr):
                return self.context.evaluateExists (expr)
end
        def nocall (self, expr):
                return self.context.evaluateNoCall (expr)
end
        def test (self, *arguments):
                if (len (arguments) % 2):
                        # We have an odd number of arguments - which means the last one is a default
                        pairs = arguments[:-1]
end
end
end
end
                        defaultValue = arguments[-1]
end
                else:
                        # No default - so use None
                        pairs = arguments
end
end
end
end
                        defaultValue = None
end
                index = 0
                while (index < len (pairs)):
                        test = pairs[index]
                        index += 1
                        value = pairs[index]
                        index += 1
                        if (test):
                                return value
end
end
                return defaultValue

end
end
class Context:
        def __init__ (self, options=None, allowPythonPath=0):
                self.allowPythonPath = allowPythonPath
                self.globals = {}
                self.locals = {}
                self.localStack = []
                self.repeatStack = []
                self.populateDefaultVariables (options)
                self.log = logging.getLogger ("simpleTALES.Context")
                self.true = 1
                self.false = 0
                self.pythonPathFuncs = PythonPathFunctions (self)
end
        def addRepeat (self, name, var, initialValue):
                # Pop the current repeat map onto the stack
                self.repeatStack.append (self.repeatMap)
end
end
end
                self.repeatMap = self.repeatMap.copy()
end
end
end
                self.repeatMap [name] = var
end
end
end
                # Map this repeatMap into the global space
                self.addGlobal ('repeat', self.repeatMap)
end
end
end
                # Add in the locals
                self.pushLocals()
end
end
end
                self.setLocal (name, initialValue)
end
        def removeRepeat (self, name):
                # Bring the old repeat map back
                self.repeatMap = self.repeatStack.pop()
                # Map this repeatMap into the global space
                self.addGlobal ('repeat', self.repeatMap)
end
end
        def addGlobal (self, name, value):
                self.globals[name] = value
end
        def pushLocals (self):
                # Push the current locals onto a stack so that we can safely over-ride them.
                self.localStack.append (self.locals)
end
end
end
                self.locals = self.locals.copy()
end
        def setLocal (self, name, value):
                # Override the current local if present with the new one
                self.locals [name] = value
end
        def popLocals (self):
                self.locals = self.localStack.pop()
end
        def evaluate (self, expr, originalAtts = None):
                # Returns a ContextVariable
                #self.log.debug ("Evaluating %s" % expr)
                if (originalAtts is not None):
                        # Call from outside
                        self.globals['attrs'] = originalAtts
end
end
end
                        suppressException = 1
end
end
end
                else:
end
end
end
                        suppressException = 0
                # Supports path, exists, nocall, not, and string
                expr = expr.strip ()
end
end
end
end
                try:
end
end
end
end
                        if expr.startswith ('path:'):
end
end
end
end
                                return self.evaluatePath (expr[5:].lstrip ())
end
end
end
end
                        elif expr.startswith ('exists:'):
end
end
end
end
                                return self.evaluateExists (expr[7:].lstrip())
end
end
end
end
                        elif expr.startswith ('nocall:'):
end
end
end
end
                                return self.evaluateNoCall (expr[7:].lstrip())
end
end
end
end
                        elif expr.startswith ('not:'):
end
end
end
end
                                return self.evaluateNot (expr[4:].lstrip())
end
end
end
end
                        elif expr.startswith ('string:'):
end
end
end
end
                                return self.evaluateString (expr[7:].lstrip())
end
end
end
end
                        elif expr.startswith ('python:'):
end
end
end
end
                                return self.evaluatePython (expr[7:].lstrip())
end
end
end
end
                        else:
                                # Not specified - so it's a path
                                return self.evaluatePath (expr)
end
end
end
end
                except PathNotFoundException, e:
end
end
end
end
                        if (suppressException):
end
end
end
end
                                return None
end
end
end
end
                        raise e
end
end
        def evaluatePython (self, expr):
                if (not self.allowPythonPath):
                        self.log.warn ("Parameter allowPythonPath is false.  NOT Evaluating python expression %s" % expr)
                        return self.false
                #self.log.debug ("Evaluating python expression %s" % expr)
                globals={}
end
end
                for name, value in self.globals.items():
                        if (isinstance (value, ContextVariable)): value = value.rawValue()
                        globals [name] = value
end
                globals ['path'] = self.pythonPathFuncs.path
                globals ['string'] = self.pythonPathFuncs.string
                globals ['exists'] = self.pythonPathFuncs.exists
                globals ['nocall'] = self.pythonPathFuncs.nocall
                globals ['test'] = self.pythonPathFuncs.test
                locals={}
                for name, value in self.locals.items():
                        if (isinstance (value, ContextVariable)): value = value.rawValue()
                        locals [name] = value
end
                try:
                        result = eval(expr, globals, locals)
                        if (isinstance (result, ContextVariable)):
                                return result.value()
end
                        return result
end
                except Exception, e:
                        # An exception occured evaluating the template, return the exception as text
                        self.log.warn ("Exception occurred evaluating python path, exception: " + str (e))
end
end
end
end
                        return "Exception: %s" % str (e)

end
end
        def evaluatePath (self, expr):
                #self.log.debug ("Evaluating path expression %s" % expr)
                allPaths = expr.split ('|')
end
end
end
                if (len (allPaths) > 1):
end
end
end
                        for path in allPaths:
end
end
end
                                # Evaluate this path
                                try:
end
end
end
                                        return self.evaluate (path.strip ())
end
end
end
                                except PathNotFoundException, e:
                                        # Path didn't exist, try the next one
                                        pass
end
end
end
end
                        # No paths evaluated - raise exception.
                        raise PATHNOTFOUNDEXCEPTION
end
end
end
end
                else:
end
end
end
end
                        # A single path - so let's evaluate it.
                        # This *can* raise PathNotFoundException
                        return self.traversePath (allPaths[0])
end
end
        def evaluateExists (self, expr):
                #self.log.debug ("Evaluating %s to see if it exists" % expr)
                allPaths = expr.split ('|')
end
end
end
                # The first path is for us
                # Return true if this first bit evaluates, otherwise test the rest
                try:
end
end
end
                        result = self.traversePath (allPaths[0], canCall = 0)
end
end
end
                        return self.true
end
end
end
                except PathNotFoundException, e:
end
end
end
                        # Look at the rest of the paths.
                        pass
end
end
end
                for path in allPaths[1:]:
end
end
end
                        # Evaluate this path
                        try:
end
end
end
                                pathResult = self.evaluate (path.strip ())
                                # If this is part of a "exists: path1 | exists: path2" path then we need to look at the actual result.
                                if (pathResult):
end
end
end
end
                                        return self.true
end
end
end
end
                        except PathNotFoundException, e:
end
end
end
end
                                pass
end
end
end
end
                # If we get this far then there are *no* paths that exist.
                return self.false
end
end
        def evaluateNoCall (self, expr):
                #self.log.debug ("Evaluating %s using nocall" % expr)
                allPaths = expr.split ('|')
end
end
end
                # The first path is for us
                try:
end
end
end
                        return self.traversePath (allPaths[0], canCall = 0)
end
end
end
                except PathNotFoundException, e:
end
end
end
                        # Try the rest of the paths.
                        pass
end
end
end
                for path in allPaths[1:]:
end
end
end
                        # Evaluate this path
                        try:
end
end
end
                                return self.evaluate (path.strip ())
end
end
end
                        except PathNotFoundException, e:
end
end
end
                                pass
end
end
end
                # No path evaluated - raise error
                raise PATHNOTFOUNDEXCEPTION
end
        def evaluateNot (self, expr):
                #self.log.debug ("Evaluating NOT value of %s" % expr)
                # Evaluate what I was passed
                try:
end
end
end
                        pathResult = self.evaluate (expr)
end
end
end
                except PathNotFoundException, e:
                        # In SimpleTAL the result of "not: no/such/path" should be TRUE not FALSE.
                        return self.true
end
end
end
end
                if (pathResult is None):
end
end
end
end
                        # Value was Nothing
                        return self.true
end
end
end
end
                if (pathResult == DEFAULTVALUE):
end
end
end
end
                        return self.false
end
end
end
end
                try:
end
end
end
end
                        resultLen = len (pathResult)
end
end
end
end
                        if (resultLen > 0):
end
end
end
end
                                return self.false
end
end
end
end
                        else:
end
end
end
end
                                return self.true
end
end
end
end
                except:
end
end
end
end
                        # Not a sequence object.
                        pass
end
end
end
end
                if (not pathResult):
end
end
end
end
                        return self.true
end
end
end
end
                # Everything else is true, so we return false!
                return self.false
end
end
        def evaluateString (self, expr):
                #self.log.debug ("Evaluating String %s" % expr)
                result = ""
end
end
end
                skipCount = 0
end
end
end
                for position in xrange (0,len (expr)):
end
end
end
                        if (skipCount > 0):
end
end
end
                                skipCount -= 1
end
end
end
                        else:
end
end
end
                                if (expr[position] == '$'):
end
end
end
                                        try:
end
end
end
                                                if (expr[position + 1] == '$'):
                                                        # Escaped $ sign
                                                        result += '$'
end
end
end
end
                                                        skipCount = 1
end
end
end
end
                                                elif (expr[position + 1] == '{'):
                                                        # Looking for a path!
                                                        endPos = expr.find ('}', position + 1)
end
end
end
end
end
                                                        if (endPos > 0):
end
end
                                                                path = expr[position + 2:endPos]
                                                                # Evaluate the path - missing paths raise exceptions as normal.
                                                                try:
end
end
end
end
                                                                        pathResult = self.evaluate (path)
end
                                                                except PathNotFoundException, e:
                                                                        # This part of the path didn't evaluate to anything - leave blank
                                                                        pathResult = u''
end
                                                                if (pathResult is not None):
                                                                        if (isinstance (pathResult, types.UnicodeType)):
                                                                                result += pathResult
end
                                                                        else:
                                                                                # THIS IS NOT A BUG!
                                                                                # Use Unicode in Context if you aren't using Ascii!
                                                                                result += unicode (pathResult)
end
end
                                                                skipCount = endPos - position 
end
end
end
                                                else:
                                                        # It's a variable
                                                        endPos = expr.find (' ', position + 1)
end
end
end
end
                                                        if (endPos == -1):
end
                                                                endPos = len (expr)
end
end
end
                                                        path = expr [position + 1:endPos]
                                                        # Evaluate the variable - missing paths raise exceptions as normal.
                                                        try:
end
                                                                pathResult = self.traversePath (path)
end
end
end
                                                        except PathNotFoundException, e:
                                                                # This part of the path didn't evaluate to anything - leave blank
                                                                pathResult = u''
end
end
end
end
                                                        if (pathResult is not None):
end
                                                                if (isinstance (pathResult, types.UnicodeType)):
                                                                                result += pathResult
end
                                                                else:
                                                                        # THIS IS NOT A BUG!
                                                                        # Use Unicode in Context if you aren't using Ascii!
                                                                        result += unicode (pathResult)
end
end
end
end
                                                        skipCount = endPos - position - 1
end
end
end
end
                                        except IndexError, e:
end
end
end
end
                                                # Trailing $ sign - just suppress it
                                                self.log.warn ("Trailing $ detected")
end
end
end
end
                                                pass
end
end
end
end
                                else:
end
end
end
end
                                        result += expr[position]
end
end
end
end
                return result
end
end
        def traversePath (self, expr, canCall=1):
                # canCall only applies to the *final* path destination, not points down the path.
                # Check for and correct for trailing/leading quotes
                if (expr.startswith ('"') or expr.startswith ("'")):
end
end
end
                        if (expr.endswith ('"') or expr.endswith ("'")):
end
end
end
                                expr = expr [1:-1]
end
end
end
                        else:
end
end
end
                                expr = expr [1:]
end
end
end
                elif (expr.endswith ('"') or expr.endswith ("'")):
end
end
end
                        expr = expr [0:-1]
end
end
end
                pathList = expr.split ('/')
end
end
end
                path = pathList[0]
end
end
end
                if path.startswith ('?'):
end
end
end
                        path = path[1:]
end
end
end
                        if self.locals.has_key(path):
end
end
end
                                path = self.locals[path]
end
end
end
                                if (isinstance (path, ContextVariable)): path = path.value()
end
end
end
                                elif (callable (path)):path = apply (path, ())
end
end
end
                        elif self.globals.has_key(path):
end
end
end
                                path = self.globals[path]
end
end
end
                                if (isinstance (path, ContextVariable)): path = path.value()
end
end
end
                                elif (callable (path)):path = apply (path, ())
end
end
end
                                #self.log.debug ("Dereferenced to %s" % path)
                if self.locals.has_key(path):
end
end
end
                        val = self.locals[path]
end
end
end
                elif self.globals.has_key(path):
end
end
end
                        val = self.globals[path]  
end
end
end
                else:
end
end
end
                        # If we can't find it then raise an exception
                        raise PATHNOTFOUNDEXCEPTION
end
end
end
                index = 1
end
end
end
                for path in pathList[1:]:
end
end
end
                        #self.log.debug ("Looking for path element %s" % path)
                        if path.startswith ('?'):
end
end
end
                                path = path[1:]
end
end
end
                                if self.locals.has_key(path):
end
end
end
                                        path = self.locals[path]
end
end
end
                                        if (isinstance (path, ContextVariable)): path = path.value()
end
end
end
                                        elif (callable (path)):path = apply (path, ())
end
end
end
                                elif self.globals.has_key(path):
end
end
end
                                        path = self.globals[path]
end
end
end
                                        if (isinstance (path, ContextVariable)): path = path.value()
end
end
end
                                        elif (callable (path)):path = apply (path, ())
end
end
end
                                #self.log.debug ("Dereferenced to %s" % path)
                        try:
end
end
end
                                if (isinstance (val, ContextVariable)): temp = val.value((index,pathList))
end
end
end
                                elif (callable (val)):temp = apply (val, ())
end
end
end
                                else: temp = val
end
end
end
                        except ContextVariable, e:
end
end
end
                                # Fast path for those functions that return values
                                return e.value()
end
end
end
                        if (hasattr (temp, path)):
end
end
end
                                val = getattr (temp, path)
end
end
end
                        else:
end
end
end
                                try:
end
end
end
                                        try:
end
end
end
                                                val = temp[path]
end
end
end
                                        except TypeError:
end
end
end
                                                val = temp[int(path)]
end
end
end
                                except:
end
end
end
                                        #self.log.debug ("Not found.")
                                        raise PATHNOTFOUNDEXCEPTION
end
end
end
                        index = index + 1
end
end
end
                #self.log.debug ("Found value %s" % str (val))
                if (canCall):
end
end
end
                        try:
end
end
end
                                if (isinstance (val, ContextVariable)): result = val.value((index,pathList))
end
end
end
                                elif (callable (val)):result = apply (val, ())
end
end
end
                                else: result = val
end
end
end
                        except ContextVariable, e:
end
end
end
                                # Fast path for those functions that return values
                                return e.value()
end
end
end
                else:
end
end
end
                        if (isinstance (val, ContextVariable)): result = val.realValue
end
end
end
                        else: result = val
end
end
end
                return result
end
        def __str__ (self):
                return "Globals: " + str (self.globals) + "Locals: " + str (self.locals)
end
        def populateDefaultVariables (self, options):
                vars = {}
                self.repeatMap = {}
                vars['nothing'] = None
                vars['default'] = DEFAULTVALUE
                vars['options'] = options
                # To start with there are no repeats
                vars['repeat'] = self.repeatMap	
end
                vars['attrs'] = None
                # Add all of these to the global context
                for name in vars.keys():
end
end
end
end
                        self.addGlobal (name,vars[name])
end
end
end
end
                # Add also under CONTEXTS
                self.addGlobal ('CONTEXTS', vars)

end
end
end
null