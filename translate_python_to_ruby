#!/usr/bin/env ruby

# Python -> Ruby translation

input_file_lines = ''
File.open( ARGV[0] ) { |input_file|
  input_file_lines = input_file.readlines
}

python_type_regexps =
[
  /BufferType/,
  /BuiltinFunctionType/,
  /BuiltinMethodType/,
  /ClassType/,
  /CodeType/,
  /ComplexType/,
  /DictProxyType/,
  /DictType/,
  /DictionaryType/,
  /EllipsisType/,
  /FileType/,
  /FloatType/,
  /FrameType/,
  /FunctionType/,
  /GeneratorType/,
  /InstanceType/,
  /IntType/,
  /LambdaType/,
  /ListType/,
  /LongType/,
  /MethodType/,
  /ModuleType/,
  /NoneType/,
  /ObjectType/,
  /SliceType/,
  /StringType/,
  /StringTypes/,
  /TracebackType/,
  /TupleType/,
  /TypeType/,
  /UnboundMethodType/,
  /UnicodeType/,
  /XRangeType/,
]


# First pass through all lines in file:
input_file_lines.each_index { |i|
  line = input_file_lines[i]

  line.gsub!( /^\s*#!(.*)python/ ) { ||
    "#!#{$1} ruby"
  }


  # Only process the following if the line is not purely a comment.
  if /^\s*#/ !~ line then
    # Group the operations that need to be performed first.
    begin
      #Remove : from end of lines.  Python does not have the ?: ternary operator, so no harm should result from removing these colons.
      line.gsub!( /:\s*$/, '' )

      # Remove "()".
      line.gsub!( /\(\s*\)/, '' )
    end

    #Remove "pass" statements.
    line.gsub!( 'pass', '' )

    # Group None-related operations together.
    begin
      # Replace "None" with "nil".
      line.gsub!( /(\W)None(\W)/ ) { ||
        "#{$1}nil#{$2}"
      }

      # Replace "* == nil" with "*.nil?".
      line.gsub!( /(\S*)\s*==\s*nil/ ) { ||
        "#{$1}.nil?"
      }
    end

    # Replace "(sys\.)?stderr" with "$stderr".
    line.gsub!( /[,\s(](sys\.)?stderr/, '$stderr' )
    # Make this substitution idempotent (will actually _correct_ the case of having multiple $ signs!).
    line.gsub!( /\$+stderr/, '$stderr' )

    # Replace "sys\.exit" with "Kernel.exit".
    line.gsub!( /sys\.exit/, 'Kernel.exit' )

    # Replace "open(" with "File.open(".
    line.gsub!( /open\s*\(/, 'File.open(' )

    #os.fstat(infile.fileno())
    #fileno
    #time.ctime
    #stat.ST_MTIME
    line.gsub!( /time\.ctime\s*\(\s*os\.fstat\s*\(\s*(\w*)\.fileno\s*\(\s*\)\s*\)\[\s*stat\.ST_MTIME\s*\]\s*\)/ ) { ||
      "#{$1}.ctime"
    }

    #os.path.abspath
    line.gsub!( /os\.path\.abspath/, 'File.expand_path' )

    # Group type-related operations together.
    begin
      # Remove "Type" from the end of type names.
      if ( python_type_regexps.detect { |type_regexp| type_regexp =~ line } ) then
        line.gsub!( /(\w*)Type/ ) { ||
          $1
        }
      end

      # Replace "type(*)" with "*.class".
      line.gsub!( /type\s*\(\s*(.*)\s*\)/ ) { ||
        "#{$1}.class"
      }
    end

    # Group time-related operations together.
    begin
      # Replace "time.time" with "Time.now".
      line.gsub!( /time\.time/, 'Time.now' )

      # Replace "time.ctime(arg)" with "arg.ctime".
      line.gsub!( /time\.ctime\s*\(\s*(\S*)\s*\)/ ) { ||
        "#{$1}.ctime"
      }

      # Replace "ctime" with "Time.ctime".
      line.gsub!( /[\s,(]+ctime/, ' Time.ctime' )
    end

    # Group string-related operations together.
    begin
      # Replace "<format string> % <arguments>" with "sprintf( <format string>, <arguments>".
      line.gsub!( /(\s*)(['"].*%[A-Za-z].*['"])\s*%\s*(\S*)/ ) { ||
        "#{$1}sprintf( #{$2}, #{$3} )"
      }

      # Replace "string.join( <arguments>, <separator> )" with "<arguments>.join( <separator> )".
      line.gsub!( /string.join\s*\(\s*((\S*)\s*(,\s*(\S*))?)\s*\)/ ) { ||
        last_comma_position = $1.rindex( ',' )
        separator_string = $1[(last_comma_position + 1)..-1]
        arguments = $1[0..(last_comma_position - 1)]
        replacement = "#{arguments}.join"
        if ! separator_string.empty? then
          replacement += "( #{separator_string} )"
        end
      }

      # Replace "str( <argument> )" with "<argument>.to_s".
      line.gsub!( /str\s*\(\s*([^\)]*)\s*\)/ ) { ||
        "#{$1}.to_s"
      }

      # Replace "repr(*)" with "*.to_s".
      line.gsub!( /repr\s*\(\s*(\S*)\s*\)/ ) { ||
        "#{$1}.to_s"
      }

      # Replace ".upper" with ".upcase".
      line.gsub!( /\.upper/, '.upcase' )
      # Replace "upper( * )" with "*.upcase".
      line.gsub!( /upper\(\s*(\S*)\s*\)/ ) { ||
        "#{$1}.upcase"
      }

      # Replace ".lower" with ".downcase".
      line.gsub!( /\.lower/, '.downcase' )
      # Replace "lower( * )" with "*.downcase".
      line.gsub!( /lower\(\s*(\S*)\s*\)/ ) { ||
        "#{$1}.downcase"
      }

      # Replace "find( X, Y )" with "X.include?( Y )".
      line.gsub!( /find\s*\(\s*([^,]*)\s*,\s*(\S*)\s*\)/ ) { ||
        "#{$1}.include?( #{$2} )"
      }

      # Replace "split( X, Y )" with "X.split( Y )".
      line.gsub!( /split\(\s*([^, ]*)\s*,\s*(\S*)\s*\)/ ) { ||
        "#{$1}.split( #{$2} )"
      }

      # Replace "strip( * )" with "*.strip".
      line.gsub!( /strip\(\s*(\S*)\s*\)/ ) { ||
        "#{$1}.strip"
      }
    end

    # Replace "complex" calls with "Complex.new" calls.
    # The Ruby Complex class actually doesn't have the string parsing functionality that Python's complex() does,
    # so it would need to be extended if this substitution were needed to fully work.
    line.gsub!( /\s*complex\s*\(\s*(\S*)\s*\)/ ) { ||
      "Complex.new( #{$1} )"
    }

    # Replace "float" calls with ".to_f".
    line.gsub!( /\s*float\s*\(\s*(\S*)\s*\)/ ) { ||
      "#{$1}.to_f"
    }

    # Replace "long" calls with ".to_i".
    line.gsub!( /\s*long\s*\(\s*(\S*)\s*\)/ ) { ||
      "#{$1}.to_i"
    }

    # Replace "int" calls with ".to_i".
    line.gsub!( /\s*int\s*\(\s*(\S*)\s*\)/ ) { ||
      "#{$1}.to_i"
    }

    #Replace """ with =begin (cleanup that converts some to =end comes later).
    line.gsub!( '"""', '=begin' )

    #Replace ".__class__" with ".class".
    line.gsub!( /\.__class__/, '.class' )

    #Replace ".append(*)" with "<< *".
    line.gsub!( /\.append\s*\((\w*)\s*\)/ ) { ||
      " << #{$1}"
    }

    # Replace "replace" with "gsub".
    line.gsub!( /replace\s*\(\s*(\S*)\s*\)/ ) { ||
      arguments = $1.split( ',' )

      if arguments.length == 2 then
        replacement = "gsub( #{arguments[0].strip}, #{arguments[1].strip} )"
      elsif arguments.length == 3 then
        replacement = "#{arguments[0].strip}.gsub( #{arguments[1].strip}, #{arguments[2].strip} )"
      end

      replacement
    }

    # Replace "dir" calls.
    line.gsub!( /\s*dir\s*\(\s*(\S*)\s*\)/ ) { ||
      "#{$1}.public_methods"
    }

    # Group these operations, which must be performed in the specified order.
    begin
      # Replace "def method" with "def _method" to avoid conflicting with Object's built-in "method" method.
      # But first, replace calls to "method" with calls to "_method".
      line.gsub!( /method\s*\(/, '_method(' )
      line.gsub!( /def method\s*\(/, 'def _method(' )

      # Replace "getattr" calls, also taking care of the case where the result of getattr is a method and is actually called.
      line.gsub!( /getattr\s*\(\s*(\S*)\s*,\s*(\S*)\s*\)(\s*\(\s*(\S*)\s*\))?/ ) { ||
        replacement = "#{$1}.method( #{$2} )"

        if ! $3.nil? and ! $3.empty? then
          replacement += '.call'

          if ! $4.nil? and ! $4.empty? then
            replacement += ".( #{$4} )"
          end
        end

        replacement
      }

      # Replace "setattr" calls.
      line.gsub!( /setattr\s*\(\s*(\S*)\s*,\s*(\S*)\s*,\s*(\S*)\s*\)/ ) { ||
        "#{$1}.#{$2} = #{$3}"
      }
    end
    # Replace "callable" calls".
    line.gsub!( /callable\s*\(\s*(\S*)\s*\)/ ) { ||
      "#{$1}.respond_to?( 'call' )"
    }

    begin
      # Replace ".im_func.__name__" with ".to_s".
      line.gsub!( /\.im_func\.__name__/, '.to_s.split( /#/ )[2][0..-2]' )

      # Replace ".im_func.func_code.co_argcount" with ".arity".
      line.gsub!( /\.im_func\.func_code\.co_argcount/, '.arity' )
    end

    # Group all the "self" operations together.
    begin
      # Replace "(self, *)" with "(*)".
      line.gsub!( /\(\s*self\s*,\s*/, '( ' )

      # Replace "*(self)" with "*".
      line.gsub!( /(\S*)\s*\(\s*self\s*\)/ ) { ||
        $1
      }

      #Replace "self.<method_name>(" with $1, but N.B. jEdit didn't correctly handle the "[^\)]".  Strictly speaking, could leave this syntax alone for methods in Ruby, but that would complicate the "self." member variable reference translation below.
      line.gsub!( /self\.(\S*\s*\([^\)]*)/ ) { ||
        if ! $1.nil? then
          $1
        end
      }

      #Finally, replace "/self\./" with "@".
      if /self\.class/ !~ line then
        line.gsub!( /self\./, '@' )
      end
    end

    #Replace "/^\s*(class\s*.*)\((.*)\)/" with "$1 < $2".  Make sure case-sensitive search is used!
    #line.gsub!( /(class\s*.*)(\((.*)\))?/ ) { ||
    line.gsub!( /^\s*(class\s*\w*)(\()?\s*(\w*)\s*\)/ ) { ||
      if $2 then
        "#{$1} < #{$3}"
      else
        "#{$1}"
      end
    }

    #Use the following Ruby code on every line of code to translate [*:*] slice notation:
    line.gsub!( /(.*)\[\s*(\S*)\s*:\s*(\S*)\s*\](.*)/ ) { ||
      if $2.empty? then
        "#{$1}[0..#{$3}-1]#{$4}"
      else
        "#{$1}[#{$2}..#{$3}-1]#{$4}"
      end
    }

    # Replace "except <>, <>" with "rescue <> => <>".
    line.gsub!( /(except\s+\(?\s*(\S*)\s*\)?)\s*,\s*(\S*)/ ) { ||
      replacement = "rescue #{$2}"
      if ! $3.nil? and !$3.empty? then
        replacement += " => #{$3}"
      end
      replacement
    }
    #Replace "try" with "begin", "except" with "rescue".
    line.gsub!( 'try', 'begin' )
    line.gsub!( /except\s+/, 'rescue ' )

    # Replace "sys.exc_info" with .
    line.gsub!( /(sys\.)?exc_info/, '$!.class, $!, $@' )

    # Replace "traceback.format_exception(*)" with '$@.each { |element| element << "\n" }'.
    line.gsub!( /(traceback\.)?format_exception\([^\)]*\)/, '$@.each { |element| element << "\n" }' )

    #Replace "elif" with "elsif".
    line.gsub!( 'elif', 'elsif' )

    # Group all "import" related code together.
    begin
      #Use the following Ruby code on every line of code to translate import statements:
      #if /(from)?\s*(\S*)\s*import\s*(\S*)\s*(\S*)$/ =~ line then
        #$3.split( ',' ).each { |imported_function|
          #puts( "require #{$2.gsub( /\./, '\/' )}/#{imported_function.strip} $4" )
      if /^\s*(from\s*(\S*))?(\s*)import/ =~ line then
        import_hierarchy = $2
        imported_functions = line.split( 'import' )[1].strip.split( /,\s*/ )

        portion_after_import_keyword = line.split( 'import' )[1]
        comments_at_end_of_line = portion_after_import_keyword[(portion_after_import_keyword.rindex( imported_functions[-1][-1..-1] ) + 1)..-1].strip

        first_imported_function = TRUE
        imported_functions.each { |imported_function|
          imported_function.strip!

          new_line = ''
          if ! import_hierarchy.nil? then
            import_hierarchy.gsub!( /\./, '/' )
            new_line += "require '#{import_hierarchy}"
            if import_hierarchy.split( '/' )[-1] == imported_function
              new_line += "'"
            else
              new_line += "/#{imported_function}'"
            end
          else
            new_line += "require '#{imported_function}'"
          end

          if ! comments_at_end_of_line.empty? then
            new_line += '# ' + comments_at_end_of_line
          end

          new_line += "\n"

          if first_imported_function then
            line = new_line
            first_imported_function = FALSE
          else
            line += "#{new_line}"
          end
        }

        # Not exactly sure why this assignment is needed here, but it is (at least until I understand better why it's currently needed).
        input_file_lines[i] = line
      end

      # Finally, replace all remaining instances of "import" with "require".
      line.gsub!( /import/, 'require' )
    end

    # Replace "sys.argv" with "ARGV".
    #line.gsub!( /sys.argv/, 'ARGV' )
    # Replace "argv" with "ARGV".
    line.gsub!( /(sys\.)?argv(,\s*)?/ ) {
      if $1 then
        'ARGV, '
      else
        'ARGV'
      end
    }

    # Replace "exec" with "eval".
    line.gsub!( /exec([\.\(\s])/ ) { ||
      "eval#{$1}"
    }

    # Replace "len(*)" with "*.length".
    line.gsub!( /len\s*\(\s*([^\)]*)\s*\)/ ) { ||
      "#{$1}.length"
    }

    # Replace "def __init__" with "def initialize".
    line.gsub!( /def __init__/, 'def initialize' )

    # Replace "def __str__" with "def to_s".
    line.gsub!( /def __str__/, 'def to_s' )

    # Replace recognition-of-self-as-main-program idiom.
    line.gsub!( /if\s*__name__\s*==\s*(['"])__main__\1/, 'if $0 == __FILE__' )
    #line.gsub!( /if\s*__name__\s*==\s*"__main__"/, 'if $0 == __FILE__' )

    # Group regular expression operations together.
    begin
      # Replace "re.compile" with "Regexp.new".
      line.gsub!( /re\.compile/, 'Regexp.new' )

      # Replace ".search(" with ".match(".
      line.gsub!( /\.search\(/, '.match(' )

      # Replace ".group" with "[0]".
      line.gsub!( /\.group/, '[0]' )

      # Replace ".end" with ".end( 0 )".
      line.gsub!( /([^\.])\.end/ ) {||
        "#{$1}.end( 0 )"
      }
    end

    # Replace " [A-Z]+\w*(" with " [A-Z]+\w*.new(" (constructor call).
    line.gsub!( /(\s+[A-Z]+\w*)\s*\(/ ) { ||
      " #{$1}.new("
    }

    # Replace "glob( * )" with "Dir.glob( * )".
    line.gsub!( /glob\s*\(/, 'Dir.glob(' )
  end
}


# Need second pass through all lines in the file:
is_even_numbered_occurrence_of_begin = TRUE
input_file_lines.each_index { |i|
  line = input_file_lines[i]

  # Only process if the line is not purely a comment.
  if /^\s*#/ !~ line then
    # Replace every second occurrence of =begin with =end.
    if /=begin/ =~ line then
      is_even_numbered_occurrence_of_begin = !is_even_numbered_occurrence_of_begin
      if is_even_numbered_occurrence_of_begin then
        line.gsub!( '=begin' , '=end' )
        input_file_lines[i] = line
      end
    end

    # Don't need to "require" Ruby's built-in equivalents of the following Python modules.
    line.gsub!( /require 'os'/, '' )
    line.gsub!( /require 'os\.path'/, '' )
    line.gsub!( /require 're'/, '' )
    line.gsub!( /require 'string'/, '' )
    line.gsub!( /require 'sys'/, '' )
    line.gsub!( /require 'time'/, '' )
    line.gsub!( /require 'traceback'/, '' )
    line.gsub!( /require 'types.*/, '' )
  end
}

#Replace remaining instances of "self." with "@" as long as the "self." reference does not contain "/_{2,}/" somewhere (double- [or greater] underscore is Python convention for private member names).


# Write output file.
File.open( ARGV[0] + '.rb', 'w' ) { |output_file|
  input_file_lines.each { |line|
    output_file.puts( line )
  }
}

puts( 'Done!  Be sure to add \'end\' statements to your code by hand as needed!' )
